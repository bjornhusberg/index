#!/usr/bin/ruby

require "set"
require "digest/md5"

module IndexStatus
  UNKNOWN = 0 # Unknown status
  CHECKED = 1 # Verified file
  MISSING = 2 # Removed file
  ALTERED = 3 # Modified file
  INDEXED = 4 # New file
  RENAMED = 5 # Moved file
  DELETED = 6 # Marked for removal from index
end

$DEFAULT_INDEX_FILENAME = "index.txt"

class FileData
  attr_accessor :size, :checksum, :status, :old_size, :old_checksum, :old_file
  def initialize(*args)
    @size, @checksum, @status = *args
  end
end

class Progress
  def initialize(total, description)
    @total = total
    @progress = 0
    @next_update = Time.now+5
    @description = description
  end

  def inc()
    update(@progress + 1)
  end

  def update(progress)
    @progress = progress
    return if @next_update > Time.now
    if @description
      STDERR.puts @description
    end
    @description = nil
    STDERR.print("\r#{@progress}/#{@total}")
    @missing_new_line = true
    @next_update = Time.now + 1
  end

  def close()
    puts if @missing_new_line
  end
end

def checksum(file)
  Digest::MD5.file(file).to_s
end

def size(file)
  File.size(file).to_s
end

def parse_index(file)
  index = Hash.new
  if File.exists? file
    File.open(file, "r:UTF-8").each do |line|
      if !/^(.*) (\d+) ([abcdef\d]+)$/.match(line)
        STDERR.puts "Index file is corrupt on line: " + line
        exit
      end
      index[$1] = FileData.new($2, $3, IndexStatus::UNKNOWN)
    end
  end
  index
end

def filter_index(index, status)
  index.select{|file, data| data.status == status}
end

def find_files(directory)
  files = Array.new
  Dir.foreach(directory)
  .select{|filename| !filename.match(/^\.$/) && !filename.match(/^\..*/) && !filename.match(/^index\.txt.*/)}
  .each do |filename|
    filename = filename.encode!('UTF-8','UTF8-MAC')
    file = File.join(directory, filename)
    if File.directory?(file)
      files = files.concat(find_files(file))
    else
      files.push(file)
    end
  end
  files
end

def index_current_directory(index)
  files = find_files(".").select{|file| index[file] == nil}
  progress = Progress.new(files.length, "Indexing current directory...")
  files.each do |file|
    progress.inc
    index[file] = FileData.new(size(file), checksum(file), IndexStatus::INDEXED)
  end
  progress.close
end

def index_missing_files(index)
  index
  .select{|file, data| data.status == IndexStatus::UNKNOWN && !File.exists?(file)}
  .each{|file, data| data.status = IndexStatus::MISSING}
end

def index_renamed_files(index)
  checksums = Hash.new
  filter_index(index, IndexStatus::INDEXED).each do |file, data|
    files = checksums[data.checksum]
    if files == nil
      files = Array.new
      checksums[data.checksum] = files
    end
    files.push(file)
  end
  filter_index(index, IndexStatus::MISSING).each do |file, data|
    files = checksums[data.checksum]
    next if files == nil
    files.each do |otherfile|
      otherdata = index[otherfile]
      next if otherdata.size != data.size
      next if otherdata.status != IndexStatus::INDEXED
      STDERR.puts "Moved #{file} to #{otherfile}"
      data.status = IndexStatus::DELETED
      otherdata.status = IndexStatus::RENAMED
      otherdata.old_file = file
      break
    end
  end
  index.delete_if{|file, data| data.status == IndexStatus::DELETED}
end

def verify_index(index, fast)
  unknown = filter_index(index, IndexStatus::UNKNOWN)
  progress = Progress.new(unknown.length, "Verifying index...")
  unknown.each do |file, data|
    progress.inc
    size = size(file)
    checksum = fast ? data.checksum : checksum(file)
    if size != data.size || checksum != data.checksum
      checksum = fast ? checksum(file) : checksum
      data.status = IndexStatus::ALTERED
      data.old_size = data.size
      data.old_checksum = data.checksum
      data.size = size
      data.checksum = checksum
    else
      data.status = IndexStatus::CHECKED
    end
  end
  progress.close
end

def write_file(filename, lines, skip_if_empty=true)
  File.open(filename, 'w:UTF-8'){|out| out.puts(lines)} if !skip_if_empty || !lines.empty?
end

def write_log(index, log_file)
  write_file("#{log_file}-deleted", filter_index(index, IndexStatus::MISSING).keys)
  write_file("#{log_file}-new", filter_index(index, IndexStatus::INDEXED).keys)
  write_file("#{log_file}-moved", filter_index(index, IndexStatus::RENAMED)
    .map{|file, data| "#{data.old_file} to #{file}"})
  write_file("#{log_file}-modified", filter_index(index, IndexStatus::ALTERED)
    .map{|file, data| "#{file} from #{data.old_checksum} to #{data.checksum}"})
  write_file("#{log_file}-backup", index.select{|file, data| data.status != IndexStatus::INDEXED}
    .map{|file, data| "#{data.old_file || file} #{data.old_size || data.size} #{data.old_checksum || data.checksum}"})
end

def write_index(index, file)
  write_file(file,
    index.select{|file, data| data.status != IndexStatus::MISSING}
    .sort
    .map{|file, data| "#{file} #{data.size} #{data.checksum}"},
    skip_if_empty: false)
end

def format_file_size(size)
  for prefix in ['', 'k', 'M', 'G', 'T']
    break if size < 1024
    size /= 1024
  end
  "#{size}#{prefix}B"
end

def index(index_file, fast, dry)
  index = parse_index(index_file)
  STDERR.puts "Index contains #{index.length} files"
  STDERR.puts "Running #{fast ? 'file size' : 'full'} index verification..."
  index_current_directory(index)
  index_missing_files(index)
  index_renamed_files(index)
  verify_index(index, fast)
  if index.any?{|file, data| data.status != IndexStatus::CHECKED}
    STDERR.puts "Update summary:"
    STDERR.puts "#{filter_index(index, IndexStatus::INDEXED).count} new files"
    STDERR.puts "#{filter_index(index, IndexStatus::RENAMED).count} renamed files"
    STDERR.puts "#{filter_index(index, IndexStatus::MISSING).count} missing files"
    STDERR.puts "#{filter_index(index, IndexStatus::ALTERED).count} altered files"
    if !dry
      write_log(index, index_file + "." + Time.now.strftime("%Y%m%d_%H%M%S"))
      write_index(index, index_file)
      STDERR.puts "Index updated"
    end
  else
    STDERR.puts "Index not modified"
  end
end

def hashkey(data)
  "#{data.size}-#{data.checksum}"
end

def find(index_file)
  STDERR.puts "Finding unindexed files"
  remote_index = parse_index(index_file)
  keys = remote_index.map{|file, data| hashkey(data)}.to_set
  STDERR.puts "Remote index contains #{remote_index.length} files"
  local_index = index_file == $DEFAULT_INDEX_FILENAME ? Hash.new : parse_index($DEFAULT_INDEX_FILENAME)
  index_current_directory(local_index)
  STDERR.puts "Local index contains #{local_index.length} files"
  new_files = local_index.select{|file, data| !keys.include?(hashkey(data))}
  new_files.each{|file, data| STDOUT.puts(file)}
  STDERR.puts "Found #{new_files.count} unindexed files"
end

def dedup(index_file)
  STDERR.puts "Finding duplicated files in the index"
  duplicates = parse_index(index_file)
  .group_by{|file, data| hashkey(data)}
  .select{|key, files| files.count > 1}
  .map{|key, files| files.to_h}
  if duplicates.empty?
    STDERR.puts "No duplicate files found"
    return
  end
  duplicates.each do |files|
    STDERR.puts "Duplicates of #{files.keys.first} (#{files.values.first.size} bytes):"
    STDOUT.puts(files.keys.drop(1))
  end
  count = duplicates.sum{|files| files.length - 1}
  bytes = duplicates.sum{|files| (files.length - 1) * files.values.first.size.to_i}
  STDERR.puts "Deduplication of #{count} files would save #{format_file_size bytes}."
end

fast = ARGV.delete('fast')
find = ARGV.delete('find')
dedup = ARGV.delete('dedup')
dry = ARGV.delete('dry')

if ARGV.count > 1
  STDERR.puts "Usage: index [dedup|find] [fast] [dry] [index file path]"
  return
elsif ARGV.any? && !File.exists?(ARGV.first)
  STDERR.puts "Index file not found: #{ARGV.first}"
  return
end

index_file = ARGV.first || $DEFAULT_INDEX_FILENAME

if dedup
  dedup(index_file)
elsif find
  find(index_file)
else
  index(index_file, fast, dry)
end
