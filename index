#!/usr/bin/ruby

require "set"
require "digest/md5"

module IndexStatus
  UNKNOWN = 0 # Unknown status
  CHECKED = 1 # Verified file
  MISSING = 2 # Removed file
  ALTERED = 3 # Modified file
  INDEXED = 4 # New file
  RENAMED = 5 # Moved file
  DELETED = 6 # Marked for removal from index
end

class FileData
  attr_accessor :length, :checksum, :status, :oldLength, :oldChecksum, :oldFile
  def initialize(*args)
    @length, @checksum, @status = *args
  end
end

def checksum(file)
  Digest::MD5.file(file).to_s
end

def length(file)
  File.size(file).to_s
end

def parseIndex(file)
  STDERR.puts "Reading index..."
  index = Hash.new
  if File.exists? file
    File.open(file, "r:UTF-8").each do |line|
      if !/^(.*) (\d+) ([abcdef\d]+)$/.match(line)
        STDERR.puts "Index file is corrupt on line: " + line
        exit
      end
      index[$1] = FileData.new($2, $3, IndexStatus::UNKNOWN)
    end
  end
  STDERR.puts "Index contains #{index.length} files"
  index
end

def findFiles(directory)
  files = Array.new
  Dir.foreach(directory) do |filename|
    next if filename.match(/^\.$/) || filename.match(/^\..*/) || filename.match(/^index\.txt.*/)
    filename = filename.encode!('UTF-8','UTF8-MAC')
    file = File.join(directory, filename)
    if File.directory? file
      files = files.concat(findFiles(file))
    else
      files.push(file)
    end
  end
  files
end

def indexNewFiles(index, files)
  STDERR.puts "Indexing new files..."
  files.each do |file|
    next if index[file] != nil
    index[file] = FileData.new(length(file), checksum(file), IndexStatus::INDEXED)
  end
end

def indexMissingFiles(index)
  STDERR.puts "Indexing missing files..."
  index.each do |file, data|
    next if data.status != IndexStatus::UNKNOWN
    next if File.exist? file
    data.status = IndexStatus::MISSING
  end
end

def indexRenamedFiles(index)
  STDERR.puts "Indexing renamed files..."
  checksums = Hash.new
  index.each do |file, data|
    next if data.status != IndexStatus::INDEXED
    files = checksums[data.checksum]
    if files == nil
      files = Array.new
      checksums[data.checksum] = files
    end
    files.push(file)
  end
  index.each do |file, data|
    next if data.status != IndexStatus::MISSING
    files = checksums[data.checksum]
    next if files == nil
    files.each do |otherfile|
      otherdata = index[otherfile]
      next if otherdata.length != data.length
      next if otherdata.status != IndexStatus::INDEXED
      STDERR.puts "Moved #{file} to #{otherfile}"
      data.status = IndexStatus::DELETED
      otherdata.status = IndexStatus::RENAMED
      otherdata.oldFile = file
      break
    end
  end
  index.delete_if{|file, data| data.status == IndexStatus::DELETED}
end

def indexModifiedFiles(index, fast)
  STDERR.puts "Verifying index..."
  index.each do |file, data|
    next if data.status != IndexStatus::UNKNOWN
    length = length(file)
    checksum = fast ? data.checksum : checksum(file)
    if length != data.length || checksum != data.checksum
      checksum = fast ? checksum(file) : checksum
      data.status = IndexStatus::ALTERED
      data.oldLength = data.length
      data.oldChecksum = data.checksum
      data.length = length
      data.checksum = checksum
    else
      data.status = IndexStatus::CHECKED
    end
  end
end

def writeLog(index, logFile)
  STDERR.puts "Writing log..."
  files = index.select{|file,data| data.status == IndexStatus::MISSING}
  if !files.empty?
    out = File.open(logFile + "-deleted", 'w')
    files.each do |file,data|
      out.puts file
    end
  end
  files = index.select{|file,data| data.status == IndexStatus::INDEXED}
  if !files.empty?
    out = File.open(logFile + "-new", 'w')
    files.each do |file,data|
      out.puts file
    end
  end
  files = index.select{|file,data| data.status == IndexStatus::RENAMED}
  if !files.empty?
    out = File.open(logFile + "-moved", 'w')
    files.each do |file,data|
      out.puts "#{data.oldFile} to #{file}"
    end
  end
  files = index.select{|file,data| data.status == IndexStatus::ALTERED}
  if !files.empty?
    out = File.open(logFile + "-modified", 'w')
    files.each do |file,data|
      out.puts "#{file} from #{data.oldChecksum} to #{data.checksum}"
    end
  end
  if index.any?{|file,data| data.status != IndexStatus::CHECKED}
    out = File.open(logFile + "-backup", 'w')
    files = index.select{|file,data| data.status != IndexStatus::INDEXED}
    files.each do |file,data|
      out.puts "#{data.oldFile || file} #{data.oldLength || data.length} #{data.oldChecksum || data.checksum}"
    end
  end
end

def writeIndex(index, file)
  return if !index.find{|f,data| data.status != IndexStatus::CHECKED}
  STDERR.puts "Writing index..."
  out = File.open(file, 'w:UTF-8')
  index.keys.sort.each do |f|
    data = index[f]
    next if data.status == IndexStatus::MISSING
    out.puts "#{f} #{data.length} #{data.checksum}"
  end
end

def printSummary(index)
  STDERR.puts "Summary:"
  indexed = index.count{|file, data| data.status == IndexStatus::INDEXED}
  renamed = index.count{|file, data| data.status == IndexStatus::RENAMED}
  missing = index.count{|file, data| data.status == IndexStatus::MISSING}
  altered = index.count{|file, data| data.status == IndexStatus::ALTERED}
  STDERR.puts "#{indexed} new files"
  STDERR.puts "#{renamed} renamed files"
  STDERR.puts "#{missing} missing files"
  STDERR.puts "#{altered} altered files"
end

def printFindSummary(index)
  indexed = index.select{|file, data|
    data.status == IndexStatus::INDEXED || data.status == IndexStatus::ALTERED }
  STDERR.puts "Found #{indexed.count} unindexed files:"
  indexed.keys.sort.each do |file|
    STDOUT.puts "#{file}"
  end
end

def index(indexFile, fast)
  STDERR.puts "Running #{fast ? 'fast (file size)' : 'full (file size and checksum)'} index verification"
  index = parseIndex(indexFile)
  STDERR.puts "Scanning current directory"
  files = findFiles(".")
  indexNewFiles(index, files)
  indexMissingFiles(index)
  indexRenamedFiles(index)
  indexModifiedFiles(index, fast)
  printSummary(index)
  writeLog(index, indexFile + "." + Time.now.strftime("%Y%m%d_%H%M%S"))
  writeIndex(index, indexFile)
  STDERR.puts "Done."
end

def find(indexFile, fast)
  STDERR.puts "Finding unindexed files using #{fast ? 'file size' : 'file size and checksum'} index verification"
  index = parseIndex(indexFile)
  STDERR.puts "Scanning current directory"
  files = findFiles(".")
  indexNewFiles(index, files)
  indexMissingFiles(index)
  indexRenamedFiles(index)
  indexModifiedFiles(index, fast)
  printFindSummary(index)
  STDERR.puts "Done."
end

def formatFileSize(size)
  for prefix in ['', 'k', 'M', 'G', 'T']
    if size > 1024 && prefix != 'T'
      size = size / 1024
    else
      return "#{size}#{prefix}B"
    end
  end
end

def dedup(indexFile)
  STDERR.puts "Finding duplicated files in the index"
  index = parseIndex(indexFile)
  groups = index.group_by{ |file, data| data.length + "-" + data.checksum }
  duplicates = groups.select{ |key, files| files.count > 1 }
  bytes = 0
  count = 0
  duplicates.each do | key, files |
    STDERR.puts "Duplicates of #{files.first[0]}:"
    files.drop(1).each do | file, data |
      STDOUT.puts file
      bytes += data.length.to_i
      count += 1
    end
  end
  if count > 0
    STDERR.puts "Deduplication of #{count} files would save #{formatFileSize bytes}."
  else
    STDERR.puts "No duplicate files found"
  end
  STDERR.puts "Done."
end

fast = ARGV.any? { |arg| arg == 'fast' }
find = ARGV.any? { |arg| arg == 'find' }
dedup = ARGV.any? { |arg| arg == 'dedup' }

indexFile = ARGV.find { |arg| arg != 'fast' && arg != 'find' && arg != 'dedup' }
indexFile = indexFile ? indexFile : "index.txt"

if dedup
  dedup(indexFile)
elsif find
  find(indexFile, fast)
else
  index(indexFile, fast)
end
